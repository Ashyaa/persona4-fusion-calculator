# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := binding
DEFS_Debug := \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-fPIC \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-m64 \
	-g \
	-O0

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-fno-rtti \
	-std=gnu++0x \
	-std=c++0x \
	-fexceptions \
	-frtti

INCS_Debug := \
	-I/home/maxime/.node-gyp/1.8.1/src \
	-I/home/maxime/.node-gyp/1.8.1/deps/uv/include \
	-I/home/maxime/.node-gyp/1.8.1/deps/v8/include \
	-I$(srcdir)/node_modules/nan

DEFS_Release := \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION'

# Flags passed to all source files.
CFLAGS_Release := \
	-fPIC \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-m64 \
	-O3 \
	-ffunction-sections \
	-fdata-sections \
	-fno-omit-frame-pointer

# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-fno-rtti \
	-std=gnu++0x \
	-std=c++0x \
	-fexceptions \
	-frtti

INCS_Release := \
	-I/home/maxime/.node-gyp/1.8.1/src \
	-I/home/maxime/.node-gyp/1.8.1/deps/uv/include \
	-I/home/maxime/.node-gyp/1.8.1/deps/v8/include \
	-I$(srcdir)/node_modules/nan

OBJS := \
	$(obj).target/$(TARGET)/src/binding.o \
	$(obj).target/$(TARGET)/src/sass_context_wrapper.o \
	$(obj).target/$(TARGET)/src/libsass/ast.o \
	$(obj).target/$(TARGET)/src/libsass/base64vlq.o \
	$(obj).target/$(TARGET)/src/libsass/bind.o \
	$(obj).target/$(TARGET)/src/libsass/cencode.o \
	$(obj).target/$(TARGET)/src/libsass/constants.o \
	$(obj).target/$(TARGET)/src/libsass/context.o \
	$(obj).target/$(TARGET)/src/libsass/contextualize.o \
	$(obj).target/$(TARGET)/src/libsass/copy_c_str.o \
	$(obj).target/$(TARGET)/src/libsass/error_handling.o \
	$(obj).target/$(TARGET)/src/libsass/eval.o \
	$(obj).target/$(TARGET)/src/libsass/expand.o \
	$(obj).target/$(TARGET)/src/libsass/extend.o \
	$(obj).target/$(TARGET)/src/libsass/file.o \
	$(obj).target/$(TARGET)/src/libsass/functions.o \
	$(obj).target/$(TARGET)/src/libsass/inspect.o \
	$(obj).target/$(TARGET)/src/libsass/json.o \
	$(obj).target/$(TARGET)/src/libsass/node.o \
	$(obj).target/$(TARGET)/src/libsass/output_compressed.o \
	$(obj).target/$(TARGET)/src/libsass/output_nested.o \
	$(obj).target/$(TARGET)/src/libsass/parser.o \
	$(obj).target/$(TARGET)/src/libsass/prelexer.o \
	$(obj).target/$(TARGET)/src/libsass/remove_placeholders.o \
	$(obj).target/$(TARGET)/src/libsass/sass.o \
	$(obj).target/$(TARGET)/src/libsass/sass2scss.o \
	$(obj).target/$(TARGET)/src/libsass/sass_context.o \
	$(obj).target/$(TARGET)/src/libsass/sass_functions.o \
	$(obj).target/$(TARGET)/src/libsass/sass_util.o \
	$(obj).target/$(TARGET)/src/libsass/sass_values.o \
	$(obj).target/$(TARGET)/src/libsass/source_map.o \
	$(obj).target/$(TARGET)/src/libsass/to_c.o \
	$(obj).target/$(TARGET)/src/libsass/to_string.o \
	$(obj).target/$(TARGET)/src/libsass/units.o \
	$(obj).target/$(TARGET)/src/libsass/utf8_string.o \
	$(obj).target/$(TARGET)/src/libsass/util.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-pthread \
	-rdynamic \
	-m64

LDFLAGS_Release := \
	-pthread \
	-rdynamic \
	-m64

LIBS :=

$(obj).target/binding.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/binding.node: LIBS := $(LIBS)
$(obj).target/binding.node: TOOLSET := $(TOOLSET)
$(obj).target/binding.node: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(obj).target/binding.node
# Add target alias
.PHONY: binding
binding: $(builddir)/binding.node

# Copy this to the executable output path.
$(builddir)/binding.node: TOOLSET := $(TOOLSET)
$(builddir)/binding.node: $(obj).target/binding.node FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/binding.node
# Short alias for building this executable.
.PHONY: binding.node
binding.node: $(obj).target/binding.node $(builddir)/binding.node

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/binding.node

